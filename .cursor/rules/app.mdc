---
alwaysApply: true
description: Debate_agents 앱의 핵심 개념과 아키텍처 정의
---

# Debate_agents - AI 패널 토론 시뮬레이션 앱

## 앱 개요

**Debate_agents**는 AI 기반의 콘솔 애플리케이션으로, 사용자가 입력한 토론 주제를 바탕으로 가상의 전문가 패널들이 진행하는 토론을 시뮬레이션하는 시스템입니다.

## 핵심 목적

- 다양한 관점에서 특정 주제에 대한 심층적인 토론 제공
- 서로 다른 배경과 전문성을 가진 AI 에이전트들 간의 건설적인 논의 창출
- 사용자에게 균형잡힌 시각과 포괄적인 이해 제공

## 시스템 아키텍처

### 에이전트 구성

1. **Debate Manager Agent (1명)**
   - 토론 진행 및 주재
   - 패널 에이전트들에게 페르소나 부여
   - 토론 방식 결정 및 안내
   - 결론 정리 및 요약

2. **Panel Agents (4명)**
   - 각각 서로 다른 전문 분야의 전문가
   - 고유한 배경과 커리어 보유
   - 주제에 대한 서로 다른 관점과 의견 제시
   - Manager의 진행에 따라 순차적 발언 및 패널간 토론

### 토론 진행 방식

1. **초기화 단계**
   - 사용자 토론 주제 입력
   - Manager가 주제 분석 및 전문가 페르소나 생성
   - 토론 방식 및 규칙 안내

2. **토론 진행 단계**
   - 일반적인 패널토론 방식 채택
   - Manager의 발언권 분배
   - 각 패널의 순차적 의견 개진
   - 상호 토론 및 반박

3. **결론 단계**
   - Manager의 각 패널 의견 요약
   - 전체적인 결론 및 시사점 정리
   - 토론 종료

## 기술적 특징

- **토론 시간**: 약 10분 (설정 가능)
- **실행 환경**: Console Application
- **Configuration**: 토론 시간 등 설정값 관리
- **AI 페르소나**: 동적 전문가 캐릭터 생성

## 기술 스택

- **언어**: Python 3.11+
- **AI Framework**: AutoGen (Multi-Agent Framework)
- **AI 모델**: OpenAI GPT-4.1
- **가상환경**: Python venv 
- **의존성 관리**: requirements.txt

## 환경 설정 상태

- ✅ Python 가상환경 (venv) 생성 및 활성화
- ✅ 필수 패키지 설치 (autogen, openai, python-dotenv 등)
- ✅ 프로젝트 구조 생성 (src/, tests/, config/)
- ✅ 설정 파일 (config.yaml) 생성
- ✅ 메인 애플리케이션 (main.py) 구현
- ✅ AI 에이전트 클래스 (DebateManager, PanelAgent) 구현
- ✅ 환경변수 템플릿 (env_example.txt) 생성

## 실행 방법

1. 환경변수 설정: `cp env_example.txt .env` 후 OpenAI API 키 입력
2. 가상환경 활성화: `source venv/bin/activate`
3. 애플리케이션 실행: `python main.py`

## 개발 원칙

- 각 에이전트는 독립적이고 일관된 페르소나 유지
- 균형잡힌 토론을 위한 다양성 보장
- 실제 전문가 수준의 깊이있는 논의 구현
- 사용자 친화적인 콘솔 인터페이스 제공
